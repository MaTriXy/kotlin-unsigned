package unsigned

import com.ionspin.kotlin.bignum.integer.toBigInteger
import uns.*
import kotlin.test.Test


class u64_test {

    @Test
    fun u64() {

        val max = 0xFFFF_FFFF_FFFF_FFFFu

        U64(ULong.MAX_VALUE).v `==` max
        U64("11111111_11111111_11111111_11111111_11111111_11111111_11111111_11111111", 2).v `==` max
        U64("1'777'777'777'777'777'777'777", 8).v `==` max
        U64("18446744073709551615").v `==` max
        U64("FFFF_FFFF_FFFF_FFFF", 16).v `==` max

        var a = U64(ULong.MAX_VALUE)

        a.bigInt `==` max.toBigInteger()
        a.f64 `==` max.toBigInteger().f64
        a.f `==` max.toBigInteger().f
        a.ul `==` max
        a.i `==` max.i
        a.i.toChar() `==` max.i.toChar()
        a.i16 `==` max.i16
        a.i8 `==` max.i8

        a.ub `==` U8(max).v
        a.us `==` U16(max).v
        a.ui `==` U32(max).v

        var b = U64(1)
        var c = U64(0)

        a + b `==` c
        a + 1 `==` c

        c = U64(0xFFFF_FFFF__FFFF_FFFEu)

        a - b `==` c
        a - 1 `==` c

        // BUG underscore https://youtrack.jetbrains.com/issue/KT-2964

        a = U64(9_000_000_000_000_000_000)
        b = U64(2)
        c = U64(18_000_000_000_000_000_000u)

        a * b `==` c
        a * 2 `==` c

        c / b `==` a
        c / 2 `==` a

        b = U64(17_000_000_000_000_000_000u)
        c = U64(8_000_000_000_000_000_000)

        b % a `==` c
        b % 9_000_000_000_000_000_000 `==` c

        a = U64(0b1010_1010__1010_1010__1010_1010__1010_1010__1010_1010__1010_1010__1010_1010__1010_1010u)
        b = U64(0b0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111)
        c = U64(0b0000_1010__0000_1010__0000_1010__0000_1010__0000_1010__0000_1010__0000_1010__0000_1010)

        a and b `==` c
        a and 0b0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111 `==` c

        // 1010101010101010101010101010101010101010101010101010101010101010
        // 0000111100001111000011110000111100001111000011110000111100001111
        // 1010111110101111101011111010111110101111101011111010111110101111
        c = U64(0b1010_1111__1010_1111__1010_1111__1010_1111__1010_1111__1010_1111__1010_1111__1010_1111u)

        a or b `==` c
        a or 0b1010_1111__1010_1111__1010_1111__1010_1111__1010_1111__1010_1111__1010_1111__1010_1111u `==` c

        c = U64(0b1010_0101__1010_0101__1010_0101__1010_0101__1010_0101__1010_0101__1010_0101__1010_0101u)

        a xor b `==` c
        a xor 0b0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111 `==` c

        a = U64(0b0100_1100__0111_0000__1111_0000__0111_1100__0000_1111__1100_0000__0111_1111__0000_0000)
        b = U64(32)
        c = U64(0b0000_1111__1100_0000__0111_1111__0000_0000__0000_0000__0000_0000__0000_0000__0000_0000)

        a shl b.toInt() `==` c
        a shl 32 `==` c

        c = U64(0b0000_0000__0000_0000__0000_0000__0000_0000__0100_1100__0111_0000__1111_0000__0111_1100)

        a shr b.toInt() `==` c
        a shr 32 `==` c

        b = U64(0b1011_0011__1000_1111__0000_1111__1000_0011__1111_0000__0011_1111__1000_0000__1111_1111u)

        a.inv() `==` b

        a = U64("18'000'000'000'000'000'000")

        a compareTo U64("17'999'999'999'999'999'999") `==` 1
        a compareTo 17_999_999_999_999_999_999u `==` 1
        a compareTo a `==` 0
        a compareTo 18_000_000_000_000_000_000u `==` 0

        0xFFFF_FFFF__FFFF_FFFFuL + 1.u64 `==` 0.u64
        0xFFFF_FFFF__FFFF_FFFFuL - 1.u64 `==` 0xFFFF_FFFF__FFFF_FFFEu.u64
        9_000_000_000_000_000_000L * 2.u64 `==` 18_000_000_000_000_000_000u.u64
        18_000_000_000_000_000_000uL / 2.u64 `==` 9_000_000_000_000_000_000.u64
        17_000_000_000_000_000_000uL % 9_000_000_000_000_000_000.u64 `==` 8_000_000_000_000_000_000.u64

        var d = 0b1010_1010__1010_1010__1010_1010__1010_1010__1010_1010__1010_1010__1010_1010__1010_1010uL
        val e = 0b0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111__0000_1111uL.u64

        d and e `==` 0b0000_1010__0000_1010__0000_1010__0000_1010__0000_1010__0000_1010__0000_1010__0000_1010u
        d or e `==` 0b1010_1111__1010_1111__1010_1111__1010_1111__1010_1111__1010_1111__1010_1111__1010_1111u
        d xor e `==` 0b1010_0101__1010_0101__1010_0101__1010_0101__1010_0101__1010_0101__1010_0101__1010_0101u
        d = 0b0100_1100__0111_0000__1111_0000__0111_1100__0000_1111__1100_0000__0111_1111__0000_0000uL
        d shl U64(32) `==` 0b0000_1111__1100_0000__0111_1111__0000_0000__0000_0000__0000_0000__0000_0000__0000_0000u
        d shr U64(32) `==` 0b0000_0000__0000_0000__0000_0000__0000_0000__0100_1100__0111_0000__1111_0000__0111_1100u
        d compareTo U64(0b1010_1010__1010_1010__1010_1010__1010_1010__1010_1010__1010_1010__1010_1010__1010_1011u) `==` -1
        d compareTo U64(d) `==` 0
    }
}