package unsigned

import uns.*
import kotlin.test.Test

class u32_test {

    @Test
    fun u16() {

        /**
         * BUG, 0xFFFFFFFF is interpreted as Long
         * https://youtrack.jetbrains.com/issue/KT-2780
         * https://youtrack.jetbrains.com/issue/KT-4749
         */

        U32(0xFFFF_FFFF).v `==` 0xFFFF_FFFFu
        U32("11111111_11111111_11111111_11111111", 2).v `==` 0xFFFF_FFFFu
        U32("37'777'777'777", 8).v `==` 0xFFFF_FFFFu
        U32("4'294'967'295").v `==` 0xFFFF_FFFFu
        U32("FFFFFFFF", 16).v `==` 0xFFFF_FFFFu

        var a = U32(0xFFFF_FFFF)

        a.bigInt `==` BigInt(0xFFFF_FFFF)
        a.f64 `==` 0xFFFF_FFFF.f64
        a.f `==` 0xFFFF_FFFF.f
        a.L `==` 0xFFFF_FFFF // this is automatically interpreted as Long
        a.i `==` 0xFFFF_FFFF.i
        a.i.toChar() `==` 0xFFFF_FFFF.i.toChar()
        a.i16 `==` 0xFFFF_FFFF.i16
        a.i8 `==` 0xFFFF_FFFF.i8

        a.ub `==` U8(0xFFFF_FFFF).v
        a.us `==` U16(0xFFFF_FFFF).v
        a.ul `==` U64(0xFFFF_FFFF).v

        var b = U32(1)
        var c = U32(0)

        a + b `==` c
        a + 1 `==` c

        c = U32(0xFFFF_FFFE)

        a - b `==` c
        a - 1 `==` c

        // TODO underscore https://youtrack.jetbrains.com/issue/KT-2964

        a = U32(2_000_000_000)
        b = U32(2)
        c = U32(4_000_000_000)

        a * b `==` c
        a * 2 `==` c

        c / b `==` a
        c / 2 `==` a

        b = U32(2_750_000_000)
        c = U32(750_000_000)

        b % a `==` c
        b % 2_000_000_000 `==` c

        a = U32(0b1010_1010__1010_1010__1010_1010__1010_1010)
        b = U32(0b0000_1111__0000_1111__0000_1111__0000_1111)
        c = U32(0b0000_1010__0000_1010__0000_1010__0000_1010)

        a and b `==` c
        a and 0b0000_1111__0000_1111__0000_1111__0000_1111 `==` c

        c = U32(0b1010_1111__1010_1111__1010_1111__1010_1111)

        a or b `==` c
        a or 0b1010_1111__1010_1111__1010_1111__1010_1111.i `==` c

        c = U32(0b1010_0101__1010_0101__1010_0101__1010_0101)

        a xor b `==` c
        a xor 0b0000_1111__0000_1111__0000_1111__0000_1111 `==` c

        a = U32(0b0100_1100__0111_0000__1111_0000__0111_1101)
        b = U32(16)
        c = U32(0b1111_0000__0111_1101__0000_0000__0000_0000)

        a shl b `==` c
        a shl 16 `==` c

        c = U32(0b0000_0000__0000_0000__0100_1100__0111_0000)

        a shr b `==` c
        a shr 16 `==` c

        b = U32(0b1011_0011__1000_1111__0000_1111__1000_0010)

        a.inv() `==` b

        a = U32(2_000_000_000)

        a compareTo U32(2_000_000_000 - 1) `==` 1
        a compareTo (2_000_000_000u - 1u) `==` 1
        a compareTo a `==` 0
        a compareTo 2_000_000_000u `==` 0
        a compareTo 2_000_000_000.ui `==` 0

        0xFFFF_FFFF.i + U32(1) `==` 0.u32
        0xFFFF_FFFF.i - U32(1) `==` 0xFFFF_FFFE.u32
        2_000_000_000 * U32(2) `==` 4_000_000_000.u32
        4_000_000_000.i / U32(2) `==` 2_000_000_000.u32
        3_750_000_000.i % U32(1000000000) `==` 750_000_000.u32

        val d = 0b0100_1100__0111_0000__1111_0000__0111_1101
        val e = 0b0101_0101__0101_0101__0101_0101__0101_0101
        // 0b01001100011100001111000001111101
        // 0b01010101010101010101010101010101
        // 0b01000100010100000101000001010101
        d and U32(e) `==` 0b0100_0100__0101_0000__0101_0000__0101_0101
        // 0b01001100011100001111000001111101
        // 0b01010101010101010101010101010101
        // 0b01011101011101011111010101111101
        d or U32(e) `==` 0b0101_1101__0111_0101__1111_0101__0111_1101
        // 0b01001100011100001111000001111101
        // 0b01010101010101010101010101010101
        // 0b00011001001001011010010100101000
        d xor U32(e) `==` 0b0001_1001__0010_0101__1010_0101__0010_1000
        d shl U32(16) `==` 0b1111_0000__0111_1101__0000_0000__0000_0000.i
        d shr U32(16) `==` 0b0000_0000__0000_0000__0100_1100__0111_0000
        d.ui compareTo U32(d - 1) `==` 1
        d.ui compareTo U32(d) `==` 0
    }
}